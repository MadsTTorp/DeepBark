name: Run Scraping Pipeline

on:
  schedule:
    - cron: '0 0 * * 0'
      branches:
        - main
  workflow_dispatch:
    branches:
      - main

permissions:
  contents: write
  releases: write

jobs:
  pipeline:
    runs-on: ubuntu-latest
    env:
      PYTHONPATH: ${{ github.workspace }}
    steps:
      # 1. Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # 2. Prepare Output Directory on Host
      - name: Prepare Output Directory
        run: |
          mkdir -p ${{ github.workspace }}/output
          chmod 777 ${{ github.workspace }}/output

      # 3. Set up Docker Buildx (optional but recommended for caching & multi-platform builds)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 4. Build the Docker image using your Dockerfile
      - name: Build Docker image
        run: docker build -t my-project:latest .

      # 5. Run the pipeline in a container with a volume mount for the output directory.
      #    We remove the chown command because the output directory is already prepared.
      - name: Run Pipeline in Container
        run: |
          docker run --rm -v ${{ github.workspace }}/output:/app/output my-project:latest \
            bash -c "mkdir -p /app/output && python src/pipeline/pipeline_creation.py --config src/config/production_config.yaml"

      # 6. Package the generated artifacts into a zip file.
      - name: Package Artifacts
        run: python src/utils/package_artifacts.py --output-path output --archive-name release_artifacts_${{ github.run_number }}

      # 7. Create a GitHub Release.
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "release-${{ github.run_number }}"
          release_name: "Release ${{ github.run_number }}"
          draft: false
          prerelease: false

      # 8. Upload the packaged artifact as a release asset.
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./output/release_artifacts_${{ github.run_number }}.zip
          asset_name: release_artifacts_${{ github.run_number }}.zip
          asset_content_type: application/zip
