name: Run Pipeline and Release Artifacts

on:
  schedule:
    - cron: '0 0 * * 0'  # Every Sunday at midnight UTC
  workflow_dispatch:

jobs:
  pipeline:
    runs-on: ubuntu-latest
    env:
      # Set any needed environment variables here.
      PYTHONPATH: ${{ github.workspace }}
    steps:
      # 1. Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # 2. Set up Docker Buildx (optional but recommended for caching & multi-platform)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 3. Build the Docker image
      - name: Build Docker image
        run: docker build -t my-project:latest .

      # 4. Run the pipeline inside the container
      # This will run the CMD defined in your Dockerfile, which is:
      # python src/pipeline/pipeline_creation.py --config src/config/production_config.yaml
      - name: Run Pipeline in Container
        run: docker run --rm my-project:latest

      # 5. Package the generated artifacts
    - name: Run Pipeline in Container
      run: docker run --rm -v ${{ github.workspace }}/output:/app/output my-project:latest

      # 6. Create a GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "release-${{ github.run_number }}"
          release_name: "Release ${{ github.run_number }}"
          draft: false
          prerelease: false

      # 7. Upload the packaged artifact as a release asset
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./output/release_artifacts_${{ github.run_number }}.zip
          asset_name: release_artifacts_${{ github.run_number }}.zip
          asset_content_type: application/zip
